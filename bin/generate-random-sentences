#!/usr/bin/env perl6
use v6.d;

use Grammar::TokenProcessing;

my %*SUB-MAIN-OPTS = :named-anywhere;

#| Generates random sentences for a given grammar.
multi MAIN(
        Str $grammar,                        #= Grammar name.
        Str $rule-body,                      #= Rule body (to start generation with.)
        UInt $n = 10,                        #= Number of sentences.
        UInt :$max-iterations = 40,          #= Max number of recursive rule replacement iterations.
        UInt :$max-random-list-elements = 6, #= Max number of elements to use generate random lists.
        Str :$sep = ' ',                     #= Separator of the join literals; if 'NONE' Raku code lists are returned.
        Str :$sym = 'English'                #= Sym string to concretize proto rules with.
           ) {

    try require ::($grammar);
    if ::($grammar) ~~ Failure {
        die "Cannot find grammar named: $grammar.";
    }

    my $focusGrammar = ::($grammar);

    die "The first argument is expected to be of type Grammar."
    unless $focusGrammar ~~ Grammar;

    my %focusRules = $focusGrammar.^method_table;

    my $sep2 = $sep eq 'NONE' ?? Whatever !! $sep;
    my @randSentences = (^$n).map({ generate-random-sentence($rule-body, %focusRules, :$max-iterations, :$max-random-list-elements, sep => $sep2, :$sym)});

    if $sep eq 'NONE' {
        @randSentences = @randSentences>>.raku
    }
    say @randSentences.join("\n");
}